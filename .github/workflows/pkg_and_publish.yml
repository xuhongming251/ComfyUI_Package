name: "PKG and publish"

on:
  workflow_dispatch:
    inputs:
      xformers:
        description: 'xformers version'
        required: false
        type: string
        default: ""
      extra_dependencies:
        description: 'extra dependencies'
        required: false
        type: string
        default: ""
      cu:
        description: 'cuda version'
        required: true
        type: string
        default: "124"

      python_minor:
        description: 'python minor version'
        required: true
        type: string
        default: "12"

      python_patch:
        description: 'python patch version'
        required: true
        type: string
        default: "7"
      
      force_update_deps:
        description: 'Force update deps (true/false)'
        required: false
        type: string
        default: 'false'

jobs:
  build_dependencies:
    runs-on: windows-latest
    # 设置GITHUB_TOKEN权限
    permissions: write-all
    steps:
      # 设置Python版本
      - uses: actions/setup-python@v5
        with:
          python-version: 3.${{ inputs.python_minor }}.${{ inputs.python_patch }}

      # 打印输入消息
      - name: Print Input Vars
        shell: bash
        run: |
          echo 'Input variable list:'
          echo "force_update_deps:"
          echo ${{ inputs.force_update_deps }}

      # 尝试恢复缓存
      - name: Restore dependencies cache
        id: restore_cache
        if: ${{ inputs.force_update_deps != 'true' }}
        uses: actions/cache/restore@v4
        with:
          path: cu${{ inputs.cu }}_python_deps.tar
          key: ${{ runner.os }}-build-cu${{ inputs.cu }}-${{ inputs.python_minor }}
          restore-keys: |
            ${{ runner.os }}-build-cu${{ inputs.cu }}-

      - name: Print restore_cache Result
        shell: bash
        run: |
          echo "steps.restore_cache.outputs.cache-hit:"
          echo ${{ steps.restore_cache.outputs.cache-hit}}


      # 没有缓存则打印个日志
      - name: IF No dependencies
        if: steps.restore_cache.outputs.cache-hit != 'true'
        run: |
          echo "No cache hit, skipping extraction."


      # 拉取ComfyUI代码
      - name: Clone ComfyUI From Git
        shell: bash
        run: |
          echo "current path:"
          pwd
          git clone --depth 1 https://github.com/comfyanonymous/ComfyUI.git
          cd ComfyUI
          echo "Newest ComfyUI files:"
          ls -lah .
      
      # 如果恢复有文件，并且不强制更新缓存，则解压原来的缓存
      - name: If Exist Chche Dependencies, Extract dependencies
        if: ${{ steps.restore_cache.outputs.cache-hit == 'true' && inputs.force_update_deps != 'true' }}
        shell: bash
        run: |
          echo "current path:"
          pwd
          echo 'begin extract deps'
          ls -lah .
          tar -xvf cu${{ inputs.cu }}_python_deps.tar -C .
          echo 'after extract deps'
          ls -lah .

      # 如果没有缓存或者强制更新缓存，则重新执行依赖安装
      - name: Build dependencies
        if: ${{ steps.restore_cache.outputs.cache-hit == 'false' || inputs.force_update_deps == 'true' }}
        shell: bash
        run: |
          echo "steps.restore_cache.outputs.cache-hit:"
          echo ${{ steps.restore_cache.outputs.cache-hit}}
          echo "force_update_deps:"
          echo ${{ inputs.force_update_deps }}

          echo "current path:"
          pwd
          cd ComfyUI
          python -m pip wheel --no-cache-dir torch torchvision torchaudio ${{ inputs.xformers }} ${{ inputs.extra_dependencies }} --extra-index-url https://download.pytorch.org/whl/cu${{ inputs.cu }} -r requirements.txt pygit2 -w ./temp_wheel_dir
          echo "ComfyUI Deps have installed, the whl files:"
          ls -lah temp_wheel_dir
          mv temp_wheel_dir cu${{ inputs.cu }}_python_deps
          tar cf cu${{ inputs.cu }}_python_deps.tar cu${{ inputs.cu }}_python_deps
          echo "deps tar file info:"
          ls -lh cu${{ inputs.cu }}_python_deps.tar
          mv cu${{ inputs.cu }}_python_deps.tar ../
          cd ..
          echo "current path:"
          pwd
          ls -lah .

      - name: Download Python Bin For embed
        shell: bash
        run: |
          echo "current path:"
          pwd
          ls -lh .
          curl https://www.python.org/ftp/python/3.${{ inputs.python_minor }}.${{ inputs.python_patch }}/python-3.${{ inputs.python_minor }}.${{ inputs.python_patch }}-embed-amd64.zip -o python_embeded.zip
          unzip python_embeded.zip -d python_embeded
          cd python_embeded
          echo "begin down pip.py"
          curl https://bootstrap.pypa.io/get-pip.py -o get-pip.py
          ./python.exe get-pip.py
          echo 'import site' >> ./python3${{ inputs.python_minor }}._pth
          sed -i '1i../ComfyUI' ./python3${{ inputs.python_minor }}._pth
          echo "current path:"
          pwd
          echo "python embed files:"
          ls -lh .
          cd ..
          echo "current path:"
          pwd
          ls -lh .


      # 需要缓存条件时，直接删除旧缓存
      - uses: prantlf/delete-cache-action@v2
        if: ${{ steps.restore_cache.outputs.cache-hit == 'false' ||  inputs.force_update_deps == 'true' }}
        with:
          key: ${{ runner.os }}-build-cu${{ inputs.cu }}-${{ inputs.python_minor }}

      # 如果没有缓存或强制不使用缓存，则保存缓存
      - name: Save dependencies cache
        if: ${{ steps.restore_cache.outputs.cache-hit == 'false' ||  inputs.force_update_deps == 'true' }}
        uses: actions/cache/save@v4
        with:
          path: cu${{ inputs.cu }}_python_deps.tar
          key: ${{ runner.os }}-build-cu${{ inputs.cu }}-${{ inputs.python_minor }}